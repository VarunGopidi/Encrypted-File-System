import pandas as pd
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

log_file_path = "/Users/saitejachalla/Desktop/Log/app.log"
# Load the log data
with open(log_file_path, 'r') as applog:
    log_data = applog.read()
    
# Convert the log data to a DataFrame
log = log_data.strip().split('\n')
log_entries = [line.split(' - ', 2) for line in log]
log_data = pd.DataFrame(log_entries, columns=['Timestamp', 'Level', 'Message'])

# Extract relevant information from log messages
split_timestamp = log_data['Timestamp'].str.split(' ', 1, expand=True)
log_data['Date'] = pd.to_datetime(split_timestamp[0])
log_data['Time'] = pd.to_datetime(split_timestamp[1])
log_data['Username'] = log_data['Message'].str.extract(r'Username (\w+)')
log_data['Action'] = log_data['Message'].str.extract(r'The user (\w+)')

# Convert 'Date' and 'Time' to numerical values
log_data['Date'] = log_data['Date'].apply(lambda x: x.timestamp())
log_data['Time'] = log_data['Time'].apply(lambda x: x.timestamp())

# Encode categorical variables
label_encoder = LabelEncoder()
log_data['Username'] = label_encoder.fit_transform(log_data['Username'])
log_data['Action'] = label_encoder.fit_transform(log_data['Action'])

# Create features for anomaly detection
feature_columns = ['Date', 'Time', 'Username', 'Action']
X = log_data[feature_columns].astype(float)  # Convert to float

# Train an Isolation Forest model
model = IsolationForest(contamination=0.05, random_state=42)
model.fit(X)

# Predict on the entire dataset
log_data['Anomaly_Score'] = model.decision_function(X)

# Display the log entries with their corresponding anomaly scores
print(log_data[['Timestamp', 'Message', 'Anomaly_Score']])

# Negative values of Anomaly_Score represent the Malware incidents and needs further implementation